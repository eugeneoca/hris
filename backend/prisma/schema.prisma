// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:1234@localhost:3306/hris"
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  password String
  role_id Int
  division_id Int

  role Role @relation(fields: [role_id], references: [id])
  division Division @relation(fields: [division_id], references: [id])
  employee_profile Employee?
  sessions Session[]
  timeInOuts TimeInOut[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}


model Employee{
  id Int @id @default(autoincrement())

  first_name String @unique
  last_name String
  middle_name String?
  mobile String?
  email String? @unique
  profile_picture_url String?
  address String? @db.LongText
  gender String?
  birthday DateTime?
  sss_number String?
  pagibig_number String?
  philhealth String?
  tin_number String?
  position String?
  rank Int?
  sick_leave_limit Int?
  vacation_leave_limit Int?
  hire_date DateTime?
  termination_date DateTime?

  user_id Int @unique

  user User @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("employees")
}

model Role{
  id Int @id @default(autoincrement())

  name String @unique

  users User[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("roles")
}

model Division{
  id Int @id @default(autoincrement())

  name String @unique

  users User[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("division")
}

model Session{
  id Int @id @default(autoincrement())

  token String @db.LongText
  is_active Boolean @default(true)

  user_id Int
  user User @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("sessions")
}

model TimeInOut {
  id          Int      @id @default(autoincrement())
  userid      Int
  time        DateTime
  date        DateTime
  type        String
  geolocation String?
  imageurl    String?   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user        User     @relation(fields: [userid], references: [id])
}
